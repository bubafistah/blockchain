stages:
  - build
  - test
  - deploy

build:
  stage: build
  variables:
    IMG_TAG: "next"
  image: docker
  services:
    - name: docker:dind
      command: [ "--experimental" ]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --squash -o artifacts --no-cache -t $CI_REGISTRY_IMAGE:$IMG_TAG .
    - docker push $CI_REGISTRY_IMAGE:$IMG_TAG
  artifacts:
    name: Linux 64
    paths:
      - artifacts
  rules:
    - changes:
        - "Dockerfile"
        - "chain/**/*"

build:linux64:
  stage: build
  image: docker
  services:
    - name: docker:dind
      command: [ "--experimental" ]
  variables:
    IMG_TAG: "linux-64"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --squash -o artifacts --no-cache -t $CI_REGISTRY_IMAGE:$IMG_TAG -f .build/image/linux.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$IMG_TAG
  artifacts:
    name: Linux 64
    expose_as: "Linux amd64"
    paths:
      - artifacts
  rules:
    - changes:
        - .build/image/linux.Dockerfile
        - "chain/**/*"

build:win64:
  stage: build
  image: docker
  services:
    - name: docker:dind
      command: [ "--experimental" ]
  variables:
    IMG_TAG: "win64"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --squash -o artifacts --no-cache -t $CI_REGISTRY_IMAGE:$IMG_TAG -f .build/image/win64.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$IMG_TAG
  artifacts:
    name: Windows x86_64
    expose_as: "Windows x86_64"
    paths:
      - artifacts
  rules:
    - changes:
        - .build/image/win64.Dockerfile
        - "chain/**/*"

build:freebsd64:
  stage: build
  image: docker
  services:
    - name: docker:dind
      command: [ "--experimental" ]
  variables:
    IMG_TAG: "freebsd-64"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --squash -o artifacts --no-cache -t $CI_REGISTRY_IMAGE:$IMG_TAG -f .build/image/freebsd64.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$IMG_TAG
  artifacts:
    name: FreeBSD x86_64
    expose_as: "FreeBSD x86_64"
    paths:
      - artifacts
  rules:
    - changes:
        - .build/image/freebsd64.Dockerfile
        - "chain/**/*"

build:macos-intel:
  stage: build
  image: docker
  services:
    - name: docker:dind
      command: [ "--experimental" ]
  variables:
    IMG_TAG: "macos-intel"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --squash -o artifacts --no-cache -t $CI_REGISTRY_IMAGE:$IMG_TAG -f .build/image/macos-intel.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$IMG_TAG
  artifacts:
    name: MacOS Intel
    expose_as: "MacOS Intel"
    paths:
      - artifacts
  rules:
    - changes:
        - .build/image/macos-intel.Dockerfile
        - "chain/**/*"

build:riscv64:
  stage: build
  image: docker
  services:
    - name: docker:dind
      command: [ "--experimental" ]
  variables:
    IMG_TAG: "riscv64"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --squash -o artifacts --no-cache -t $CI_REGISTRY_IMAGE:$IMG_TAG -f .build/image/riscv64.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$IMG_TAG
  artifacts:
    name: riscv64
    expose_as: "riscv64"
    paths:
      - artifacts
  rules:
    - changes:
        - .build/image/riscv64.Dockerfile
        - "chain/**/*"

build:armv7:
  stage: build
  image: docker
  services:
    - name: docker:dind
      command: [ "--experimental" ]
  variables:
    IMG_TAG: "armv7"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --squash -o artifacts --no-cache -t $CI_REGISTRY_IMAGE:$IMG_TAG -f .build/image/armv7.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$IMG_TAG
  artifacts:
    name: armv7
    expose_as: "armv7"
    paths:
      - artifacts
  rules:
    - changes:
        - .build/image/armv7.Dockerfile
        - "chain/**/*"

build:armv8:
  stage: build
  image: docker
  services:
    - name: docker:dind
      command: [ "--experimental" ]
  variables:
    IMG_TAG: "armv8"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --squash -o artifacts --no-cache -t $CI_REGISTRY_IMAGE:$IMG_TAG -f .build/image/armv8.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$IMG_TAG
  artifacts:
    name: armv8
    expose_as: "armv8"
    paths:
      - artifacts
  rules:
    - changes:
        - .build/image/armv8.Dockerfile
        - "chain/**/*"
